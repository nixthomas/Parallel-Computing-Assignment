---
title: "Parallel Computing Assignment"
---

### Question 1:

Calculating mean and variance of of a random sample generated from an exponential distribution with mean = 1.

```{r}
#| warning: false
library(foreach)
library(doParallel)
library(knitr)

cl <- makeCluster(3)
registerDoParallel(cl)

result <- foreach(i = 1:100, .combine=c) %dopar% {
  rexp(1,1)
}

results <- cbind(round(mean(result),3),round(var(result),3))
colnames(results) <- c("Mean", "Variance")
kable(results, align='c')
```

### Question 2:

Comparing process time for bootstrapping samples using parallel versus serial processing.

```{r}
#| warning: false
library(MASS)
gal <- galaxies

B <- 10000
n <- length(gal)

cl <- makeCluster(3)
registerDoParallel(cl)

t1 <- system.time(
  {
    median_boot <- foreach(i = 1:B, .combine = rbind) %do% {
  median(sample(gal, n, replace = TRUE))
    }
  }
)

t2 <- system.time(
  {
    median_boot <- foreach(i = 1:B, .combine = rbind) %dopar% {
      median(sample(gal, n, replace=TRUE))
    }
  }
)

t3 <- system.time(
  {
   median_boot <- foreach(i = 1:(B/1000), .combine = rbind) %dopar% {
     replicate(1000, median(sample(gal, n, replace=TRUE)))
   } 
  }
)


time_results <- rbind(t1[1:3], t2[1:3], t3[1:3])
rownames(time_results) <- c("For serial processing", "For parallel processing", "For 1000 bootstrap samples at a time")

kable(time_results, align ='c', caption="System times for different processes")
```

### Question 3:

Estimating the coverage of a percentile bootstrap confidence interval for an exponential distribution with mean 1:

```{r}
mean_true <- 1
cl <- makeCluster(3)
registerDoParallel(cl)

result <- foreach(i = 1:1000, .combine = c) %dopar% {
    data <- rexp(50,1)
    boot_means <- replicate(1000, mean(sample(data, 50, replace = TRUE)))
    
    l <- quantile(boot_means, 0.025)
    u <- quantile(boot_means, 0.975)
    
    (mean_true >= l) & (mean_true <= u)
}

coverage <- mean(result)
```

The coverage is `r coverage`

### Question 4:

Iterating over 3 vectors of normally distributed random numbers with 5 variables each, and calculating the maximum value in each vector.

```{r}
#| warning: false

set.seed(1234)
result_q4 <- foreach(i=1:3, .combine=cbind, .packages="iterators")%dopar%{
  vecs <- irnorm(1, count=5)
  round(max(nextElem(vecs)),3)
}

colnames(result_q4) <- c("V1", "V2", "V3")
kable(result_q4, caption="Maximum Values for each Vector", align='c')
```

### Question 5:

Printing out the system times for different R functions performing the task required in Question 4.

```{r}

cl <- makeCluster(3)

parLapply_time <- system.time(
  {
    Sys.sleep(0.01)
    result1 <- parLapply(cl, 1:3, function(i) {
    library(iterators)
    vecs <- irnorm(1, count=5)
    round(max(nextElem(vecs)),3)
    })
  }
)

for_each_time <- system.time(
  {
    Sys.sleep(0.01)
    result2 <- foreach(i=1:3, .combine=cbind, .packages="iterators")%dopar%{
    vecs <- irnorm(1, count=5)
    round(max(nextElem(vecs)),3)
    }
  }
)


replicate_time <- system.time(
  {
    Sys.sleep(0.01)
    result3 <- replicate(3, {
      max(nextElem(irnorm(1, count = 5)))
      })
  } 
)

time_table <- rbind(parLapply_time[1:3], for_each_time[1:3], replicate_time[1:3])
rownames(time_table) <- c("parLapply", "foreach", "replicate")
kable(time_table, align='c', caption = 'System times when each of the respective R functions are applied')
```
